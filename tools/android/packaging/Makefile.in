include ../../depends/Makefile.include

BUILD_TYPE:=@BUILD_CONFIGURATION@
BUILD_TYPE_LC:=$(shell echo $(BUILD_TYPE) | tr A-Z a-z)

OBJS = libcurl.so
OBJS+= libcpluff.so
OBJS+= libass.so
OBJS+= libxbogg.so libxbvorbis.so libxbvorbisfile.so
OBJS+= libmpeg2.so libmpeg2convert.so
OBJS+= libnfs.so
OBJS+= libdsm.so
OBJS+= libsmb2.so
OBJS+= libsmbclient.so
OBJS+= libbluray.so
OBJS+= libplist.so
OBJS+= libshairplay.so
OBJS+= librtmp.so

PLATFORM_OBJS =
EXCLUDED_ADDONS += $(PKG_EXCLUDED_ADDONS)

ifeq ($(lite),yes)
  MEDIAROOT = media.lite
  SPLASHPNG = Splash.lite.png
else
  MEDIAROOT = media
  SPLASHPNG = Splash.png
endif
XBMCROOT = $(shell cd $(CURDIR)/../../..; pwd)
COPYDIRS = system addons $(MEDIAROOT)
GCC_VERSION=$(shell $(CC) -dumpversion)
ZIP=zip

SIGN_STORE=~/.android/@APP_NAME@.keystore
SIGN_STOREPASS=android
SIGN_KEY=androiddebugkey
SIGN_KEYPASS=

ifneq ($(strip $(SIGN_KEYPASS)),)
SIGN_KEYPASS_OPT=-keypass $(SIGN_KEYPASS)
endif

SRCLIBS = $(addprefix $(PREFIX)/lib/,$(OBJS)) $(addprefix $(PREFIX)/lib/$(SDK_PLATFORM)/,$(PLATFORM_OBJS))
DSTLIBS = $(ABI)/lib/lib@APP_NAME_LC@.so $(addprefix $(ABI)/lib/,$(OBJS)) $(addprefix $(ABI)/lib/,$(PLATFORM_OBJS))
libs= $(DSTLIBS)

ABI=$(ANDROID_ABI)

all: apk

bundle: apk-clean sharedapk package-bundle

apk: apk-clean sharedapk package

source: apk-clean sharedapk pack-no-build

obb: apk-clean sharedobb

apk-unsigned: apk-clean sharedapk package-unsigned

apk-obb: apk-clean sharedobb package

source-obb: apk-clean sharedobb pack-no-build

apk-obb-unsigned: apk-clean sharedobb package-unsigned

apk-noobb: apk-clean package

source-noobb: apk-clean pack-no-build

apk-noobb-unsigned: apk-clean package-unsigned

xbmc/assets:
	mkdir -p packaging/assets

symbols: libs

shared:
	mkdir -p assets
	cp -rfp $(PREFIX)/share/@APP_NAME_LC@/* ./assets
	# depends packaging of binary pvr hardcodes path to mrmc
	cp -rfp $(PREFIX)/share/mrmc/addons/pvr.* ./assets/addons || true
	# depends packaging of repo-resources hardcodes path to mrmc
	cp -rfp $(PREFIX)/mrmc/repo-resources/* ./assets/addons || true
	# depends packaging of addons hardcodes path to mrmc
	cp -rfp $(PREFIX)/mrmc/addons/* ./assets/addons || true
	find `pwd`/assets/ -depth -name ".git" -exec rm -rf {} \;
	find `pwd`/assets/ -name "*.so" -exec rm {} \;
	find `pwd`/assets/addons/skin.*/media/* -depth -not -iname "Textures.xbt" -exec rm -rf {} \;
	find `pwd`/assets/system/keymaps/ -depth -name "joystick*.xml" ! -name "joystick.xml" -exec rm {} \;
	mv -f `pwd`/assets/system/keymaps/joystick.xml.sample `pwd`/assets/system/keymaps/joystick.xml
	cd `pwd`/assets/addons; rm -rf $(EXCLUDED_ADDONS)

sharedapk: shared | xbmc/assets
	cp -rfp assets/* ./packaging/assets

sharedobb: shared
	rm -f $(XBMCROOT)/main.@APP_NAME@.obb
	$(ZIP) -9 -q -r $(XBMCROOT)/main.@APP_NAME@.obb assets
	@echo "$(XBMCROOT)/main.@APP_NAME@.obb created"

python: | xbmc/assets
	mkdir -p packaging/assets/python2.7/lib/
	cp -rfp $(PREFIX)/lib/python2.7 packaging/assets/python2.7/lib/
	cd packaging/assets/python2.7/lib/python2.7/; rm -rf test config lib-dynload

res:
	mkdir -p packaging/java/@APP_PACKAGE_DIR@ packaging/res packaging/res/raw packaging/res/values packaging/res/xml images
	cp -rfp xbmc/res/* packaging/res/
	cp -rfp xbmc/jni packaging/
	@echo "native_arch=$(ABI)" > packaging/res/raw/xbmc.properties
	cp -fp $(XBMCROOT)/media/$(SPLASHPNG) packaging/res/drawable/splash.png
	cp -fp $(MEDIAROOT)/drawable-hdpi/ic_launcher.png packaging/res/drawable-hdpi/ic_launcher.png
	cp -fp $(MEDIAROOT)/drawable-ldpi/ic_launcher.png packaging/res/drawable-ldpi/ic_launcher.png
	cp -fp $(MEDIAROOT)/drawable-mdpi/ic_launcher.png packaging/res/drawable-mdpi/ic_launcher.png
	cp -fp $(MEDIAROOT)/drawable-xhdpi/ic_launcher.png packaging/res/drawable-xhdpi/ic_launcher.png
	cp -fp $(MEDIAROOT)/drawable-xxhdpi/ic_launcher.png packaging/res/drawable-xxhdpi/ic_launcher.png
	cp -fp $(MEDIAROOT)/drawable-xxxhdpi/ic_launcher.png packaging/res/drawable-xxxhdpi/ic_launcher.png
	cp -fp $(MEDIAROOT)/drawable-xhdpi/banner.png packaging/res/drawable-xhdpi/banner.png
	cp xbmc/strings.xml packaging/res/values/
	cp xbmc/colors.xml packaging/res/values/
	cp xbmc/activity_main.xml packaging/res/layout/
	cp xbmc/searchable.xml packaging/res/xml/

libs:
	mkdir -p packaging/lib/$(ABI) packaging/assets/python2.7/lib/
	cp -fp $(SRCLIBS) packaging/lib/$(ABI)/
	# depends packaging of binary pvr hardcodes path to mrmc
	find $(PREFIX)/lib/mrmc/addons/pvr* -name "*.so" -exec cp -fp {} packaging/lib/$(ABI)/ \; || true
	find $(PREFIX)/lib/@APP_NAME_LC@/addons -name "*.so" -exec cp -fp {} packaging/lib/$(ABI)/ \; || true
	find $(PREFIX)/lib/@APP_NAME_LC@/system -name "*.so" -exec cp -fp {} packaging/lib/$(ABI)/ \; || true
	find $(PREFIX)/share/@APP_NAME_LC@/addons -name "*.so" -exec cp -fp {} packaging/lib/$(ABI)/ \; || true
	cd packaging/lib/$(ABI)/; find . -name "*.so" -not -name "lib*.so" | sed "s/\.\///" | xargs -I@ mv @ lib@
	$(STRIP) --strip-unneeded packaging/lib/$(ABI)/*.so

java: res
	cp -fp xbmc/AndroidManifest.xml packaging/
	cp -fp xbmc/build.gradle packaging/
	cp -fp xbmc/CMakeLists.txt packaging/
	cp -fp xbmc/sources.cmake packaging/
	cp -fp xbmc/libs.cmake packaging/
	cd xbmc/src; find . -name "*.java" -exec cp --parents -fp {} ../../packaging/java/@APP_PACKAGE_DIR@/ \;

pack-no-build: libs python java

package: libs python java
	@echo "Gradle packaging..."
	ANDROID_HOME=$(SDKROOT) ./gradlew --no-daemon -PxbmcABI=$(ABI) assemble$(BUILD_TYPE)
	cp -fp packaging/build/outputs/apk/$(BUILD_TYPE_LC)/packaging-$(BUILD_TYPE_LC).apk $(XBMCROOT)/@APP_NAME@app-$(ABI)-$(BUILD_TYPE_LC).apk
	@echo "$(XBMCROOT)/@APP_NAME@app-$(ABI)-$(BUILD_TYPE_LC).apk created"

package-bundle: libs python java
	@echo "Gradle bundle packaging..."
	ANDROID_HOME=$(SDKROOT) ./gradlew --no-daemon -PxbmcABI=$(ABI) bundle$(BUILD_TYPE)
	cp -fp packaging/build/outputs/bundle/$(BUILD_TYPE_LC)/packaging.aab $(XBMCROOT)/@APP_NAME@app-$(ABI)-$(BUILD_TYPE_LC).aab
	@echo "$(XBMCROOT)/@APP_NAME@app-$(ABI)-$(BUILD_TYPE_LC).aab created"

package-unsigned: libs python java
	@echo "Gradle packaging..."
	ANDROID_HOME=$(SDKROOT) ./gradlew --no-daemon -PxbmcABI=$(ABI) assemble$(BUILD_TYPE)Unsigned

apk-sign:
	@echo "Signing..."
	@jarsigner -sigalg SHA1withRSA -digestalg SHA1 -tsa http://timestamp.digicert.com -keystore $(SIGN_STORE) -storepass $(SIGN_STOREPASS) $(SIGN_KEYPASS_OPT) packaging/build/outputs/apk/$(BUILD_TYPE_LC)Unsigned/packaging-$(BUILD_TYPE_LC)Unsigned-unsigned.apk $(SIGN_KEY)
	@$(ZIPALIGN) -f 4 packaging/build/outputs/apk/$(BUILD_TYPE_LC)Unsigned/packaging-$(BUILD_TYPE_LC)Unsigned-unsigned.apk $(XBMCROOT)/@APP_NAME@app-$(ABI)-$(BUILD_TYPE_LC).apk
	@echo "$(XBMCROOT)/@APP_NAME_LC@app-$(ABI)-$(BUILD_TYPE_LC).apk created"

$(SRCLIBS):

apk-clean:
	#rm -rf packaging
	rm -rf packaging/assets
	rm -rf assets
	mkdir -p packaging

.PHONY: force libs assets python sharedapk sharedobb res package
