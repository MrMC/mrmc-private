apply plugin: 'com.android.application'

def keystorePropertiesFile = file(String.valueOf(System.getenv("ANDROID_DEV_KEYPROPERTIES")))
if (!keystorePropertiesFile.isFile())
    keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def getDependsDir() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    def dependsDir = properties.getProperty('depends.dir', null)
    if (dependsDir == null) {
        throw new GradleException(
                "Depends location not found. Define location with depends.dir in the local.properties file!")
    }
    return dependsDir
}

def getABI() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    def dependsDir = properties.getProperty('xbmcABI', null)
    if (dependsDir == null) {
        throw new GradleException(
                "Depends location not found. Define location with depends.dir in the local.properties file!")
    }
    return dependsDir
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "@APP_PACKAGE@"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode @APP_VERSION_ANDROID_VERSION@
        versionName "@APP_VERSION@"

        externalNativeBuild {
            cmake {
                abiFilters getABI()
                arguments "-DANDROID_STL=c++_shared",
                            "-DANDROID_TOOLCHAIN=clang",
                            "-DANDROID_ALLOW_UNDEFINED_SYMBOLS=FALSE",
                            "-DANDROID_CPP_FEATURES=rtti exceptions",
                            "-DDEPENDS_DIR="+getDependsDir();
                            "-DANDROID_ARM_NEON=TRUE"
            }
        }

    }
    signingConfigs {
        standard {
            keyAlias keystoreProperties['SIGN_KEY']
            keyPassword keystoreProperties['SIGN_KEYPASS']
            storeFile file(keystoreProperties['SIGN_STORE'])
            storePassword keystoreProperties['SIGN_STOREPASS']
        }
    }
    buildTypes {
        releaseUnsigned.initWith(buildTypes.release)
        releaseUnsigned {
            signingConfig null
        }
        release {
            signingConfig signingConfigs.standard
        }

        debugUnsigned.initWith(buildTypes.debug)
        debugUnsigned {
            signingConfig null
        }
        debug {
            signingConfig signingConfigs.standard
        }

    }
    aaptOptions {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['java']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['lib']
        }
    }

    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

}

project.afterEvaluate {
    preBuild.dependsOn
}

dependencies {
    // New support library to for channels/programs development.
    implementation 'com.android.support:support-tv-provider:26.0.1'
    implementation 'com.google.code.gson:gson:2.8.0'
}

// https://developer.android.com/studio/build/configure-apk-splits
// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a': 01, 'arm64-v8a': 11,  x86: 21, x86_64: 31]

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
  variant.outputs.each { output ->
    def baseAbiVersionCode = project.ext.abiCodes.get(getABI())
    print baseAbiVersionCode

    output.versionCodeOverride =
            variant.versionCode * 100 + baseAbiVersionCode
  }

}

